#spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
#spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=none
#
#spring.test.database.replace=none
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.url=jdbc:postgresql://localhost:5432/storetest
#  ?TC_DAEMON=true&?TC_TMPFS=/testtmpfs:rw&?TC_INITFUNCTION=com.store.Application.PostgresDataBaseReadSql::initDb
spring.datasource.driverClassName=org.postgresql.Driver
spring.datasource.hikari.maximumPoolSize = 50
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
#spring.datasource.sql-script-encoding=UTF-8

#database.ts.type=sql
#database.ts_latest.type=sql
#
#sql.ts_inserts_executor_type=fixed
#sql.ts_inserts_fixed_thread_pool_size=200
#sql.ts_key_value_partitioning=MONTHS
#
#spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
#spring.jpa.properties.hibernate.order_by.default_null_ordering=last
#spring.jpa.properties.hibernate.jdbc.log.warnings=false

spring.jpa.show-sql=true

#spring.jpa.show-sql=false
#spring.datasource.driver-class-name=org.postgresql.Driver
#spring.datasource.driver-class-name=org.testcontainers.jdbc.ContainerDatabaseDriver
#spring.datasource.url=jdbc:tc:postgresql:13:///storetest
#spring.test.database.replace=none
#  ?TC_DAEMON=true&?TC_TMPFS=/testtmpfs:rw&?TC_INITFUNCTION=com.store.Application.PostgresDataBaseReadSql::initDb
#spring.datasource.url=jdbc:tc:postgresql://localhost:5432/storetest?TC_DAEMON=true&?TC_TMPFS=/testtmpfs:rw&?TC_INITFUNCTION=com.store.Application.PostgresDataBaseReadSql::initDb

spring.jpa.hibernate.ddl-auto=update
#spring.datasource.username=postgres
#spring.datasource.password=postgres


#spring.datasource.hikari.maximumPoolSize = 50

#spring.jpa.hibernate.ddl-auto=none
#database.ts_max_intervals=700
#
#sql.remove_null_chars=true
#spring.jpa.show-sql=true
##spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
##spring.jpa.properties.hibernate.order_by.default_null_ordering=last
##spring.jpa.properties.hibernate.jdbc.log.warnings=false
#spring.datasource.driverClassName=org.testcontainers.jdbc.ContainerDatabaseDriver
#spring.datasource.url=jdbc:tc:postgresql:13:///storeTest?TC_DAEMON=true&?TC_TMPFS=/testtmpfs:rw
##spring.datasource.username=postgres
##spring.datasource.password=postgres
##spring.datasource.hikari.maximumPoolSize = 50
#
##server.address=localhost
##server.port=8080
#database.ts.type=sql
#database.ts_latest.type=sql
#
#sql.ts_inserts_executor_type=fixed
#sql.ts_inserts_fixed_thread_pool_size=200
#sql.ts_key_value_partitioning=MONTHS
#
#spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
#spring.jpa.properties.hibernate.order_by.default_null_ordering=last
#spring.jpa.properties.hibernate.jdbc.log.warnings=false
#
#
#server.ssl.enabled=false
logging.charset.console=Big5
logging.pattern.console=[%green(%thread)] [%red(level)] [%cyan(%logger{36}):%yellow(%line)] %blue(%method) - %msg%n
#spring.jpa.hibernate.ddl-auto=create
##spring.datasource.url=jdbc:postgresql:13://storetest
#spring.datasource.username=postgres
#spring.datasource.password=postgres
#spring.datasource.driverClassName=org.testcontainers.jdbc.ContainerDatabaseDriver
#spring.datasource.hikari.maximumPoolSize = 50
##spring.elasticsearch.uris=http://localhost:9200
##spring.elasticsearch.connection-timeout=5000
##spring.elasticsearch.socket-timeout=30000
##spring.data.elasticsearch.repositories.enabled=true
##spring.kafka.bootstrap-servers=localhost:9092
##spring.kafka.producer.retries=0
##spring.kafka.producer.acks=all
##spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
##spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
##spring.kafka.consumer.group-id=1
##spring.kafka.consumer.auto-offset-reset=earliest
##spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
##spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#app.kafka.producer.topic=accept_item_test
#app.kafka.consumer.topic=request_item_test